# -*- coding: utf-8 -*-
"""eval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1As_EgUdOp---NEVZBkiNNOwf8PaEQiYy
"""

import torch
import torch.nn.functional as F
import numpy as np
import matplotlib.pyplot as plt
import os

from io_utils import get_dataloaders
from model import UNet
from viz import overlay_prediction
from metrics import multiclass_dice, normalized_multiclass_dice, surface_dice, specificity_score  # use your earlier metric functions

# -------------------
# CONFIG
# -------------------
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
CHECKPOINT_PATH = "checkpoints/model.pt"
CLASS_ID = 1  # tumor class for evaluation

# -------------------
# MAIN
# -------------------
def main():
    _, _, test_loader = get_dataloaders(batch_size=1)

    model = UNet(in_channels=1, out_channels=3).to(DEVICE)
    model.load_state_dict(torch.load(CHECKPOINT_PATH, map_location=DEVICE))
    model.eval()

    dice_scores, nsd_scores, spec_scores = [], [], []

    with torch.no_grad():
        for imgs, masks in test_loader:
            imgs, masks = imgs.to(DEVICE), masks.to(DEVICE)

            preds = model(imgs)
            preds_softmax = F.softmax(preds, dim=1)
            preds_argmax = preds_softmax.argmax(dim=1)

            # --- Dice ---
            dice = multiclass_dice(preds, masks)
            dice_scores.append(dice)

            # --- NSD ---
            pred_bin = (preds_argmax == CLASS_ID).cpu().numpy().astype(np.uint8)[0]
            gt_bin = (masks == CLASS_ID).cpu().numpy().astype(np.uint8)[0]
            nsd = surface_dice(pred_bin, gt_bin, tolerance=1.0)
            nsd_scores.append(nsd)

            # --- Specificity ---
            pred_class_bin = (preds_argmax == CLASS_ID).float()
            target_class_bin = (masks == CLASS_ID).float()
            spec = specificity_score(pred_class_bin, target_class_bin)
            spec_scores.append(spec)

            # --- Visualization ---
            overlay_prediction(imgs[0].cpu(), masks[0].cpu(), preds_argmax[0].cpu())

    print(f"✅ Mean Dice: {np.mean(dice_scores):.4f}")
    print(f"✅ Mean NSD : {np.mean(nsd_scores):.4f}")
    print(f"✅ Mean Specificity: {np.mean(spec_scores):.4f}")


if __name__ == "__main__":
    main()